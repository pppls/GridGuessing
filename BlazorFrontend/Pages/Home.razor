@page "/"
@using Common
@using Microsoft.AspNetCore.SignalR.Client
@inject IConfiguration Configuration
@implements IAsyncDisposable

<PageTitle>Home</PageTitle>

<h1>Nederlandse Loterij - Klik en win! </h1>
@if (grid != null)
{
    <div class="grid">
        @foreach (var element in grid)
        {
            <SquareComponent Element="@element" HubConnection="@_hubConnection" RegisterComponent="RegisterSquareComponent" />
        }
    </div>
    
    @if (showPopup)
    {
        <div class="popup">
            You @(lastPrize > 0 ? "won! Prize: " + lastPrize : "lost!")
        </div>
    }
}
else
{
<p>Loading...</p>
}

@code {
    private HubConnection _hubConnection;
    private Dictionary<int, SquareComponent> squareComponents = new ();
    
    GridElementExt[] grid;
    bool showPopup = false;
    int lastPrize = 0;
    private string _userId;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Configuration["ApiBaseUrl"])
            .Build();
        
        _hubConnection.On<FlippedGridElementExt>("UpdateGridElement", async (flippedGridElementExt) =>
        {
            await squareComponents[flippedGridElementExt.index].UpdateElement(flippedGridElementExt);
        });
        
        _hubConnection.On<GridElementExt[]>("ReceiveGrid", (receivedGrid) =>
        {
            if (receivedGrid == null || receivedGrid.Length == 0)
            {
                Console.WriteLine("Received an empty grid.");
            }
            else
            {
                grid = receivedGrid;
                Console.WriteLine("Received initial grid with " + receivedGrid.Length + " elements.");
            }
            InvokeAsync(StateHasChanged);
        });
        
        try
        {
            await _hubConnection.StartAsync();
            Console.WriteLine("Connection established. State: " + _hubConnection.State);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error establishing connection: " + ex.Message);
        }
    }
    
    public void RegisterSquareComponent(SquareComponent component)
    {
        squareComponents[component.Element.index] = component;
    }

    public (string, bool) GetWinOrLose(FlippedGridElementExt elementExt)
    {
        switch (elementExt.result)
        {
            case MonetaryPrizeResult prize:
                if (prize.areYouTheFirstFlipper)
                {
                    return ($"You won {prize} euros!", true);
                }
                else
                {
                    return ("Someone else was just a bit faster...", false);
                }

            case NoPrizeResult _:
                return ($"Too bad, so sad - you won nothing...", false);
            default:
                throw new ArgumentOutOfRangeException(nameof(elementExt.result), elementExt.result, "Invalid value for switch case.");
        }
    }
    
    public bool HasElementBeenFlipped(GridElementExt elementExt)
    {
        switch (elementExt)
        {
            case FlippedGridElementExt flippedGridElement:
                return true;
            case UnflippedGridElementExt unflippedGridElement:
                return false;
            default:
                throw new ArgumentOutOfRangeException(nameof(elementExt));
        }
    }
    
    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}