@page "/"
@using Common
@using Microsoft.AspNetCore.SignalR.Client
@inject IConfiguration Configuration
@implements IAsyncDisposable

<PageTitle>Home</PageTitle>

<h1> Klik en win! </h1>
@if (grid != null)
{
    <div class="grid">
        @foreach (var element in grid)
        {
            <SquareComponent Element="@element" HubConnection="@_hubConnection" RegisterComponent="RegisterSquareComponent" />
        }
    </div>
    

}
else
{
<p>Loading...</p>
}

@code {
    private HubConnection _hubConnection;
    private Dictionary<int, SquareComponent> squareComponents = new ();
    
    GridElementExt[] grid;
    bool showPopup = false;
    int lastPrize = 0;
    private string _userId;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Configuration["ApiBaseUrl"])
            .Build();
        
        _hubConnection.On<FlippedGridElementExt>("UpdateGridElement", async (flippedGridElementExt) =>
        {
            await squareComponents[flippedGridElementExt.index].UpdateElement(flippedGridElementExt);
        });
        
        _hubConnection.On<GridElementExt[]>("ReceiveGrid", (receivedGrid) =>
        {
            if (receivedGrid == null || receivedGrid.Length == 0)
            {
                Console.WriteLine("Received an empty grid.");
            }
            else
            {
                grid = receivedGrid;
                Console.WriteLine("Received initial grid with " + receivedGrid.Length + " elements.");
            }
            InvokeAsync(StateHasChanged);
        });
        
        try
        {
            await _hubConnection.StartAsync();
            Console.WriteLine("Connection established. State: " + _hubConnection.State);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error establishing connection: " + ex.Message);
        }
    }
    
    public void RegisterSquareComponent(SquareComponent component)
    {
        squareComponents[component.Element.index] = component;
    }
    
    public async ValueTask DisposeAsync()
    {
        await _hubConnection.DisposeAsync();
    }
}